// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Test if "id" field is correctly disallowed.
- Description: The test will check if the 'id' field is correctly disallowed when the 'setAllowedFields' method is called.
- Steps: Call the setAllowedFields method with a valid WebDataBinder object. Try to bind some value to 'id' field.
- Expected Result: The 'id' field should not be allowed to bind any value.

Test Scenario 2: Test if other fields are allowed.
- Description: The test will check if fields other than 'id' can be bound with values.
- Steps: Call the setAllowedFields method with a valid WebDataBinder object. Try to bind some value to a field other than 'id'.
- Expected Result: The fields other than 'id' should be allowed to bind values.

Test Scenario 3: Test with null WebDataBinder.
- Description: The test will check if the method behaves correctly when a null WebDataBinder is passed.
- Steps: Call the setAllowedFields method with null WebDataBinder object.
- Expected Result: The method should handle the null input gracefully. The application should not crash.

Test Scenario 4: Test with multiple disallowed fields.
- Description: The test will check if the method can correctly disallow multiple fields.
- Steps: Modify the method to disallow more fields. Call the method with a valid WebDataBinder object. Try to bind values to the disallowed fields.
- Expected Result: The disallowed fields should not be allowed to bind any values.

Test Scenario 5: Test with empty WebDataBinder.
- Description: The test will check how the method behaves when an empty WebDataBinder is passed.
- Steps: Call the setAllowedFields method with an empty WebDataBinder object.
- Expected Result: The method should handle the empty input correctly. It should not throw any exception or crash the application.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;

import static org.junit.jupiter.api.Assertions.*;

public class OwnerController_setAllowedFields_6961bda542_Test {

	private OwnerController ownerController;

	private WebDataBinder dataBinder;

	@BeforeEach
	void setUp() {
		ownerController = new OwnerController(new OwnerRepository());
	}

	@Test
	void testSetAllowedFields() {
		Owner testOwner = new Owner();
		dataBinder = new WebDataBinder(testOwner, "owner");
		ownerController.setAllowedFields(dataBinder);

		// Test if "id" field is correctly disallowed
		dataBinder.bind("id", 123);
		BindingResult bindingResult = dataBinder.getBindingResult();
		assertTrue(bindingResult.hasFieldErrors("id"));

		// Test if other fields are allowed
		dataBinder.bind("address", "123 Main St");
		assertFalse(bindingResult.hasFieldErrors("address"));
	}

	@Test
	void testSetAllowedFieldsWithNullWebDataBinder() {
		// Test with null WebDataBinder
		assertDoesNotThrow(() -> ownerController.setAllowedFields(null));
	}

	@Test
	void testSetAllowedFieldsWithEmptyWebDataBinder() {
		// Test with empty WebDataBinder
		dataBinder = new WebDataBinder(new Owner(), "");
		ownerController.setAllowedFields(dataBinder);
	}

}
