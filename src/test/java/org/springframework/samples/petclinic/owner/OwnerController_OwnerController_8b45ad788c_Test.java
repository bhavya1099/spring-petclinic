// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Test to verify that the OwnerController object is created successfully.
- Initialize OwnerRepository mock object.
- Initialize the OwnerController with the OwnerRepository mock.
- Assert that the OwnerController object is not null.

Test Scenario 2: Test to verify that the OwnerController is initialized with the correct OwnerRepository.
- Initialize OwnerRepository mock object.
- Initialize the OwnerController with the OwnerRepository mock.
- Assert that the OwnerRepository inside the OwnerController is the same as the mock.

Test Scenario 3: Test to verify that the OwnerController throws an exception when initialized with a null OwnerRepository.
- Initialize the OwnerController with null.
- Assert that an exception is thrown.

Test Scenario 4: Test to verify that the OwnerController behaves as expected when the OwnerRepository is empty.
- Initialize an empty OwnerRepository mock object.
- Initialize the OwnerController with the empty OwnerRepository mock.
- Call the appropriate methods on the OwnerController and assert that the results are as expected when the repository is empty.

Test Scenario 5: Test to verify that the OwnerController behaves as expected when the OwnerRepository is not empty.
- Initialize an OwnerRepository mock object with some data.
- Initialize the OwnerController with the OwnerRepository mock.
- Call the appropriate methods on the OwnerController and assert that the results are as expected when the repository has data.

Note: The exact methods to call and the expected results will depend on the implementation of the OwnerController and OwnerRepository.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.samples.petclinic.owner.OwnerController;
import org.springframework.samples.petclinic.owner.OwnerRepository;

import static org.junit.jupiter.api.Assertions.*;

class OwnerController_OwnerController_8b45ad788c_Test {

	private OwnerRepository ownerRepository;

	private OwnerController ownerController;

	@BeforeEach
	void setUp() {
		ownerRepository = Mockito.mock(OwnerRepository.class);
		ownerController = new OwnerController(ownerRepository);
	}

	@Test
	void testOwnerControllerObjectCreation() {
		assertNotNull(ownerController, "OwnerController object is null");
	}

	@Test
	void testOwnerControllerCorrectRepository() {
		assertSame(ownerRepository, ownerController.getOwners(),
				"OwnerController is not initialized with the correct OwnerRepository");
	}

	@Test
	void testOwnerControllerExceptionWithNullRepository() {
		assertThrows(NullPointerException.class, () -> new OwnerController(null),
				"OwnerController does not throw an exception when initialized with null");
	}

	@Test
	void testOwnerControllerWithEmptyRepository() {
		Mockito.when(ownerRepository.findAll()).thenReturn(new ArrayList<>());
		assertEquals(0, ownerController.getOwners().size(),
				"OwnerController does not behave as expected when the OwnerRepository is empty");
	}

	@Test
	void testOwnerControllerWithNonEmptyRepository() {
		List<Owner> owners = new ArrayList<>();
		owners.add(new Owner());
		Mockito.when(ownerRepository.findAll()).thenReturn(owners);
		assertEquals(1, ownerController.getOwners().size(),
				"OwnerController does not behave as expected when the OwnerRepository is not empty");
	}

}
