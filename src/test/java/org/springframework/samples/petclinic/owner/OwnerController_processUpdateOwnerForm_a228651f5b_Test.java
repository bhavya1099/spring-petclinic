// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario - Test when the owner object is valid and there are no binding results errors:**
    - Given a valid owner object and no binding results errors
    - When the processUpdateOwnerForm method is invoked
    - Then the owner's ID should be set to the provided ownerId
    - And the owner should be saved using the owners.save(owner) method
    - And the method should return "redirect:/owners/{ownerId}"

2. **Scenario - Test when the owner object is valid but there are binding results errors:**
    - Given a valid owner object and some binding results errors
    - When the processUpdateOwnerForm method is invoked
    - Then the method should return VIEWS_OWNER_CREATE_OR_UPDATE_FORM
    - And the owner's ID should not be changed
    - And the owner should not be saved

3. **Scenario - Test when the owner object is invalid:**
    - Given an invalid owner object
    - When the processUpdateOwnerForm method is invoked
    - Then the method should return VIEWS_OWNER_CREATE_OR_UPDATE_FORM
    - And the owner's ID should not be changed
    - And the owner should not be saved

4. **Scenario - Test when the ownerId is negative or zero:**
    - Given a valid owner object and a non-positive ownerId
    - When the processUpdateOwnerForm method is invoked
    - Then the owner's ID should be set to the provided ownerId
    - And the owner should be saved using the owners.save(owner) method
    - And the method should return "redirect:/owners/{ownerId}"
    - This scenario should be validated to ensure that the system handles non-positive ownerIds correctly. This could be an expected behavior or it could be a potential bug depending on the business requirements.

5. **Scenario - Test when the owner object is null:**
    - Given a null owner object
    - When the processUpdateOwnerForm method is invoked
    - Then an exception should be thrown
    - This scenario should be validated to ensure that the system handles null objects correctly. This could be an expected behavior or it could be a potential bug depending on the business requirements.

Please note that the actual behavior of the system in some scenarios may vary depending on the business requirements and the implementation of the methods called in the processUpdateOwnerForm method.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.BindingResult;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class OwnerController_processUpdateOwnerForm_a228651f5b_Test {

	@Mock
	OwnerRepository owners;

	@Mock
	BindingResult result;

	@Mock
	Owner owner;

	@InjectMocks
	OwnerController ownerController;

	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
    public void testProcessUpdateOwnerForm_WhenOwnerIsValidAndNoErrors() {
        when(result.hasErrors()).thenReturn(false);
        int ownerId = 1;
        ownerController.processUpdateOwnerForm(owner, result, ownerId);
        verify(owner, times(1)).setId(ownerId);
        verify(owners, times(1)).save(owner);
        assertEquals("redirect:/owners/{ownerId}", ownerController.processUpdateOwnerForm(owner, result, ownerId));
    }

	@Test
    public void testProcessUpdateOwnerForm_WhenOwnerIsValidAndHasErrors() {
        when(result.hasErrors()).thenReturn(true);
        assertEquals("owners/createOrUpdateOwnerForm", ownerController.processUpdateOwnerForm(owner, result, 1));
        verify(owner, never()).setId(anyInt());
        verify(owners, never()).save(any(Owner.class));
    }

	@Test
	public void testProcessUpdateOwnerForm_WhenOwnerIsInvalid() {
		assertEquals("owners/createOrUpdateOwnerForm", ownerController.processUpdateOwnerForm(null, result, 1));
		verifyZeroInteractions(owners);
	}

	@Test
    public void testProcessUpdateOwnerForm_WhenOwnerIdIsNonPositive() {
        when(result.hasErrors()).thenReturn(false);
        int ownerId = 0;
        ownerController.processUpdateOwnerForm(owner, result, ownerId);
        verify(owner, times(1)).setId(ownerId);
        verify(owners, times(1)).save(owner);
        assertEquals("redirect:/owners/{ownerId}", ownerController.processUpdateOwnerForm(owner, result, ownerId));
    }

}
