// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Validate that the method returns the correct view when the BindingResult has errors.
- Given an Owner object and a BindingResult with errors.
- When the processUpdateOwnerForm method is called.
- Then it should return the VIEWS_OWNER_CREATE_OR_UPDATE_FORM view.

Test Scenario 2: Validate that the method sets the owner's ID correctly and saves the owner when the BindingResult has no errors.
- Given an Owner object and a BindingResult with no errors.
- When the processUpdateOwnerForm method is called.
- Then it should set the owner's ID to the provided ownerId.
- And it should save the owner using the owners repository.

Test Scenario 3: Validate that the method redirects to the correct URL when the BindingResult has no errors.
- Given an Owner object and a BindingResult with no errors.
- When the processUpdateOwnerForm method is called.
- Then it should return a redirect to the URL "/owners/{ownerId}", where "{ownerId}" is the provided ownerId.

Test Scenario 4: Validate that the method handles null Owner object correctly.
- Given a null Owner object and any BindingResult.
- When the processUpdateOwnerForm method is called.
- Then it should handle the null Owner appropriately (depending on the implementation, this might mean throwing an exception, returning a certain view, etc.).

Test Scenario 5: Validate that the method handles null BindingResult correctly.
- Given an Owner object and a null BindingResult.
- When the processUpdateOwnerForm method is called.
- Then it should handle the null BindingResult appropriately (depending on the implementation, this might mean throwing an exception, returning a certain view, etc.).
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OwnerController_processUpdateOwnerForm_a228651f5b_Test {

	private static final int OWNER_ID = 1;

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

	@Mock
	private OwnerRepository owners;

	private OwnerController ownerController;

	@BeforeEach
	public void setup() {
		this.ownerController = new OwnerController(owners);
	}

	@Test
	public void testProcessUpdateOwnerForm_hasErrors() {
		Owner owner = new Owner();
		BindingResult result = new BeanPropertyBindingResult(owner, "owner");
		result.reject("error");

		String view = this.ownerController.processUpdateOwnerForm(owner, result, OWNER_ID);

		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
		verify(owners, never()).save(any(Owner.class));
	}

	@Test
	public void testProcessUpdateOwnerForm_noErrors() {
		Owner owner = new Owner();
		BindingResult result = new BeanPropertyBindingResult(owner, "owner");

		String view = this.ownerController.processUpdateOwnerForm(owner, result, OWNER_ID);

		assertEquals("redirect:/owners/" + OWNER_ID, view);
		verify(owners, times(1)).save(owner);
		assertEquals(owner.getId(), OWNER_ID);
	}

	@Test
	public void testProcessUpdateOwnerForm_nullOwner() {
		BindingResult result = new BeanPropertyBindingResult(null, "owner");

		String view = this.ownerController.processUpdateOwnerForm(null, result, OWNER_ID);

		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
		verify(owners, never()).save(any(Owner.class));
	}

	@Test
	public void testProcessUpdateOwnerForm_nullBindingResult() {
		Owner owner = new Owner();

		String view = this.ownerController.processUpdateOwnerForm(owner, null, OWNER_ID);

		assertEquals("redirect:/owners/" + OWNER_ID, view);
		verify(owners, times(1)).save(owner);
		assertEquals(owner.getId(), OWNER_ID);
	}

}
