// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test if the function fetches the correct owner based on the provided ownerId.
   - Given a valid ownerId, when initUpdateOwnerForm is called, then it should fetch the correct owner from the owners database.

2. Scenario: Test if the function returns the correct view page "VIEWS_OWNER_CREATE_OR_UPDATE_FORM" after updating the owner.
   - Given a valid ownerId, when initUpdateOwnerForm is called, then it should return the "VIEWS_OWNER_CREATE_OR_UPDATE_FORM" view.

3. Scenario: Test if the function throws an exception when an invalid ownerId is passed.
   - Given an invalid ownerId, when initUpdateOwnerForm is called, then it should throw an exception.

4. Scenario: Test if the function correctly adds the fetched owner to the model.
   - Given a valid ownerId, when initUpdateOwnerForm is called, then the fetched owner should be correctly added to the model.

5. Scenario: Test if the function handles a null ownerId correctly.
   - Given a null ownerId, when initUpdateOwnerForm is called, then it should handle it appropriately (either by throwing an exception or providing a default behavior).

6. Scenario: Test if the function handles the scenario when the ownerId does not exist in the database.
   - Given an ownerId that does not exist in the database, when initUpdateOwnerForm is called, then it should handle it appropriately (either by throwing an exception or providing a default behavior).

7. Scenario: Test if the function handles the scenario when the database operation fails.
   - Given a valid ownerId, when initUpdateOwnerForm is called and the database operation fails, then it should handle it appropriately (either by throwing an exception or providing a default behavior).

8. Scenario: Test if the function works correctly when multiple concurrent requests are made.
   - Given multiple concurrent requests with valid ownerIds, when initUpdateOwnerForm is called, then it should handle all requests correctly without any race conditions or data inconsistencies.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.ui.Model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class OwnerController_initUpdateOwnerForm_5166028c6b_Test {

	@Mock
	private OwnerRepository owners;

	@Mock
	private Model model;

	@InjectMocks
	private OwnerController ownerController;

	private static final int OWNER_ID = 1;

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

	private Owner owner;

	@BeforeEach
	public void setup() {
		owner = new Owner();
		owner.setId(OWNER_ID);
	}

	@Test
    public void testInitUpdateOwnerForm_ValidOwnerId() {
        when(owners.findById(OWNER_ID)).thenReturn(owner);

        String viewName = ownerController.initUpdateOwnerForm(OWNER_ID, model);

        verify(model).addAttribute(owner);
        assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, viewName);
    }

	@Test
    public void testInitUpdateOwnerForm_InvalidOwnerId() {
        when(owners.findById(OWNER_ID)).thenReturn(null);

        String viewName = ownerController.initUpdateOwnerForm(OWNER_ID, model);

        verify(model).addAttribute(null);
        assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, viewName);
    }

}
