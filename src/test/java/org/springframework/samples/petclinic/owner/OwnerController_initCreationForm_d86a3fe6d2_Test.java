// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Check if the method is returning the correct view.
- This validates if the method returns the correct view which is `VIEWS_OWNER_CREATE_OR_UPDATE_FORM`.

Test Scenario 2: Check if an empty Owner object is being added to the model.
- This validates if the method is correctly putting an empty `Owner` object into the model map.

Test Scenario 3: Check if the method is handling null model.
- This verifies that the method can handle a null model map being passed as a parameter.

Test Scenario 4: Check the state of the model after the method execution.
- This verifies if the method is correctly putting only one attribute (`Owner`) in the model and no other attributes are being added.

Test Scenario 5: Check if the method is handling exceptions correctly.
- This verifies that the method is correctly handling any exceptions that might be thrown during its execution.

Test Scenario 6: Check if the method is handling a model that already contains an `Owner` object.
- This verifies that the method can handle a model map that already contains an `Owner` object. The expected behavior in this scenario could be replacing the existing `Owner` object with a new one or leaving the existing `Owner` object as it is.

Test Scenario 7: Check if the method is thread-safe.
- This verifies if the method can handle concurrent requests correctly.

Test Scenario 8: Check the method's behavior with a large model.
- This validates the method's behavior when the model map contains a large number of attributes.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.ui.Model;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class OwnerController_initCreationForm_d86a3fe6d2_Test {

	private OwnerController ownerController;

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

	@BeforeEach
	void setUp() {
		OwnerRepository owners = Mockito.mock(OwnerRepository.class);
		ownerController = new OwnerController(owners);
	}

	@Test
	void testInitCreationForm() {
		Map<String, Object> model = new HashMap<>();
		String view = ownerController.initCreationForm(model);
		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
		assertTrue(model.containsKey("owner"));
		assertTrue(model.get("owner") instanceof Owner);
	}

	@Test
	void testInitCreationFormWithNullModel() {
		assertThrows(NullPointerException.class, () -> ownerController.initCreationForm(null));
	}

	@Test
	void testInitCreationFormWithExistingOwner() {
		Map<String, Object> model = new HashMap<>();
		Owner existingOwner = new Owner();
		model.put("owner", existingOwner);
		String view = ownerController.initCreationForm(model);
		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
		assertNotEquals(existingOwner, model.get("owner"));
	}

	@Test
	void testInitCreationFormWithLargeModel() {
		Map<String, Object> model = new HashMap<>();
		for (int i = 0; i < 10000; i++) {
			model.put("key" + i, "value" + i);
		}
		String view = ownerController.initCreationForm(model);
		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
		assertTrue(model.containsKey("owner"));
		assertTrue(model.get("owner") instanceof Owner);
	}

}
