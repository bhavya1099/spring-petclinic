// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the function creates a new instance of the Owner class.

   - Given: The function is called.
   - When: The function runs.
   - Then: A new instance of the Owner class should be created.

2. Test Scenario: Check if the function adds the new Owner instance to the model.

   - Given: The function is called and a new Owner instance is created.
   - When: The function runs.
   - Then: The new Owner instance should be added to the model with the key "owner".

3. Test Scenario: Check if the function returns the correct view string.

   - Given: The function is called.
   - When: The function runs.
   - Then: The function should return the string VIEWS_OWNER_CREATE_OR_UPDATE_FORM.

4. Test Scenario: Check if the function behaves correctly when the model already contains an entry with the key "owner".

   - Given: The function is called and the model already contains an entry with the key "owner".
   - When: The function runs.
   - Then: The function should replace the existing entry with the new Owner instance.

5. Test Scenario: Check the function's behavior when given a null model.

   - Given: The function is called with a null model.
   - When: The function runs.
   - Then: An appropriate exception should be thrown, such as a NullPointerException.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

@ExtendWith(MockitoExtension.class)
public class OwnerController_initCreationForm_d86a3fe6d2_Test {

	@Autowired
	private OwnerController ownerController;

	private Map<String, Object> model;

	@BeforeEach
	void setUp() {
		ownerController = new OwnerController(new OwnerRepository());
		model = new HashMap<>();
	}

	@Test
	void testInitCreationForm_NewInstanceCreated() {
		ownerController.initCreationForm(model);
		assertNotNull(model.get("owner"));
	}

	@Test
	void testInitCreationForm_AddNewInstanceToModel() {
		ownerController.initCreationForm(model);
		Owner owner = (Owner) model.get("owner");
		assertNotNull(owner);
	}

	@Test
	void testInitCreationForm_ReturnCorrectViewString() {
		String view = ownerController.initCreationForm(model);
		assertEquals(OwnerController.VIEWS_OWNER_CREATE_OR_UPDATE_FORM, view);
	}

	@Test
	void testInitCreationForm_ReplaceExistingEntry() {
		Owner existingOwner = new Owner();
		model.put("owner", existingOwner);
		ownerController.initCreationForm(model);
		Owner newOwner = (Owner) model.get("owner");
		assertNotNull(newOwner);
		assertNotEquals(existingOwner, newOwner);
	}

	@Test
	void testInitCreationForm_NullModel() {
		Exception exception = assertThrows(NullPointerException.class, () -> {
			ownerController.initCreationForm(null);
		});
		assertEquals("Model must not be null", exception.getMessage());
	}

}
