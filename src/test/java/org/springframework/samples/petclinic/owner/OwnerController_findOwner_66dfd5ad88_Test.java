// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Test when ownerId is null
Objective: To verify that when the ownerId is null, the function returns a new Owner object.
Steps:
- Call the findOwner function with null as the ownerId
- Check if the returned object is a new Owner object

Test Scenario 2: Test when ownerId is not null and exists in the database
Objective: To verify that when the ownerId is not null and exists in the database, the function returns the correct Owner object associated with the ownerId.
Steps:
- Insert a test Owner object into the database and get its ownerId
- Call the findOwner function with this ownerId
- Check if the returned Owner object matches the test Owner object inserted into the database

Test Scenario 3: Test when ownerId is not null but does not exist in the database
Objective: To verify that when the ownerId is not null but does not exist in the database, the function handles the situation correctly (for example, returns null or throws an exception, depending on the implementation of the owners.findById method).
Steps:
- Call the findOwner function with an ownerId that does not exist in the database
- Check if the function handles the situation correctly

Test Scenario 4: Test when ownerId is not an integer
Objective: To verify that when the ownerId is not an integer, the function handles the situation correctly (for example, returns null or throws an exception, depending on the implementation).
Steps:
- Call the findOwner function with a non-integer ownerId
- Check if the function handles the situation correctly

Test Scenario 5: Test when ownerId is a negative integer
Objective: To verify that when the ownerId is a negative integer, the function handles the situation correctly (for example, returns null or throws an exception, depending on the implementation).
Steps:
- Call the findOwner function with a negative integer ownerId
- Check if the function handles the situation correctly
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class OwnerController_findOwner_66dfd5ad88_Test {

	@InjectMocks
	OwnerController ownerController;

	@Mock
	OwnerRepository ownerRepository;

	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testFindOwner_WhenOwnerIdIsNull() {
		Owner owner = ownerController.findOwner(null);
		assertNotNull(owner);
	}

	@Test
	public void testFindOwner_WhenOwnerIdExistsInDatabase() {
		Owner testOwner = new Owner();
		testOwner.setId(1);
		when(ownerRepository.findById(1)).thenReturn(testOwner);

		Owner owner = ownerController.findOwner(1);
		assertNotNull(owner);
		assertEquals(testOwner.getId(), owner.getId());
	}

	@Test
    public void testFindOwner_WhenOwnerIdDoesNotExistInDatabase() {
        when(ownerRepository.findById(999)).thenReturn(null);

        Owner owner = ownerController.findOwner(999);
        assertNull(owner);
    }

	@Test
	public void testFindOwner_WhenOwnerIdIsNotAnInteger() {
		// This test case is not valid as the method signature itself prevents non-integer
		// input
	}

	@Test
    public void testFindOwner_WhenOwnerIdIsNegative() {
        // Depending on the implementation, this could be valid or throw an exception
        when(ownerRepository.findById(-1)).thenReturn(null);

        Owner owner = ownerController.findOwner(-1);
        assertNull(owner);
    }

}
