// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function is able to return a new Owner object when the ownerId is null.
   - Input: null
   - Expected output: New Owner object

2. Scenario: Check if the function is able to return the correct Owner object when valid ownerId is passed.
   - Input: Valid ownerId
   - Expected output: The Owner object associated with the passed ownerId

3. Scenario: Check the function's behavior when an invalid ownerId is passed.
   - Input: Invalid ownerId
   - Expected output: Depends on the implementation of `findById` method in `owners`. If it throws an exception for invalid id, then that exception is expected. If it returns null, then null is expected.

4. Scenario: Check the function's behavior when an ownerId of an owner that does not exist is passed.
   - Input: ownerId of non-existent owner
   - Expected output: Depends on the implementation of `findById` method in `owners`. If it throws an exception for non-existent id, then that exception is expected. If it returns null, then null is expected.

5. Scenario: Check the function's behavior when a negative ownerId is passed.
   - Input: Negative ownerId
   - Expected output: Depends on the implementation of `findById` method in `owners`. If it throws an exception for negative id, then that exception is expected. If it returns null, then null is expected.

6. Scenario: Check the function's behavior when zero is passed as ownerId.
   - Input: Zero ownerId
   - Expected output: Depends on the implementation of `findById` method in `owners`. If it throws an exception for zero id, then that exception is expected. If it returns null, then null is expected.

7. Scenario: Check the function's behavior when ownerId of maximum possible integer value is passed.
   - Input: Maximum possible integer value
   - Expected output: Depends on the implementation of `findById` method in `owners`. If it throws an exception for such large id, then that exception is expected. If it returns null, then null is expected.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

public class OwnerController_findOwner_66dfd5ad88_Test {

	@Mock
	private OwnerRepository owners;

	@InjectMocks
	private OwnerController controller;

	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testFindOwner_NullOwnerId() {
		Owner result = controller.findOwner(null);
		assertNotNull(result);
	}

	@Test
	public void testFindOwner_ValidOwnerId() {
		Owner owner = new Owner();
		when(owners.findById(1)).thenReturn(owner);

		Owner result = controller.findOwner(1);
		assertEquals(owner, result);
	}

	@Test
    public void testFindOwner_InvalidOwnerId() {
        when(owners.findById(-1)).thenReturn(null);

        Owner result = controller.findOwner(-1);
        assertNull(result);
    }

	@Test
    public void testFindOwner_NonExistentOwnerId() {
        when(owners.findById(999)).thenReturn(null);

        Owner result = controller.findOwner(999);
        assertNull(result);
    }

	@Test
    public void testFindOwner_ZeroOwnerId() {
        when(owners.findById(0)).thenReturn(null);

        Owner result = controller.findOwner(0);
        assertNull(result);
    }

	@Test
    public void testFindOwner_MaxIntOwnerId() {
        when(owners.findById(Integer.MAX_VALUE)).thenReturn(null);

        Owner result = controller.findOwner(Integer.MAX_VALUE);
        assertNull(result);
    }

}
