// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Owner ID
- Input: A valid owner ID that exists in the database
- Expected Outcome: The function should return a ModelAndView object with the correct owner details and the view name "owners/ownerDetails".

Test Scenario 2: Invalid Owner ID
- Input: An owner ID that does not exist in the database
- Expected Outcome: The function should handle the situation properly. The exact behaviour depends on the implementation of the `findById` method. It could return a ModelAndView with an error message or an empty owner object.

Test Scenario 3: Null Owner ID
- Input: A null owner ID
- Expected Outcome: The function should handle this case properly. It could return a ModelAndView with an error message or it could throw an exception.

Test Scenario 4: Negative Owner ID
- Input: A negative owner ID
- Expected Outcome: The function should handle this case properly. It could return a ModelAndView with an error message or it could throw an exception.

Test Scenario 5: Owner ID of zero
- Input: An owner ID of zero
- Expected Outcome: The function should handle this case properly. It could return a ModelAndView with an error message or it could throw an exception.

Test Scenario 6: Owner ID as a large number
- Input: A large number as owner ID which exceeds the maximum limit of integer
- Expected Outcome: The function should handle this case properly. It could return a ModelAndView with an error message or it could throw an exception.

Test Scenario 7: Owner ID as a non-integer value
- Input: A non-integer value as owner ID
- Expected Outcome: The function should handle this case properly. It could return a ModelAndView with an error message or it could throw an exception.

Test Scenario 8: Owner ID as a special character
- Input: A special character as owner ID
- Expected Outcome: The function should handle this case properly. It could return a ModelAndView with an error message or it could throw an exception.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.ModelAndView;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class OwnerController_showOwner_db2a323b89_Test {

	@Mock
	private OwnerRepository owners;

	@InjectMocks
	private OwnerController controller;

	private Owner owner;

	@BeforeEach
	void setup() {
		owner = new Owner();
		owner.setId(1);
		owner.setFirstName("John");
		owner.setLastName("Doe");
	}

	@Test
    void testShowOwner_ValidId() {
        when(owners.findById(1)).thenReturn(owner);

        ModelAndView mav = controller.showOwner(1);

        assertEquals("owners/ownerDetails", mav.getViewName());
        assertEquals(owner, mav.getModel().get("owner"));
    }

	@Test
    void testShowOwner_InvalidId() {
        when(owners.findById(-1)).thenReturn(null);

        ModelAndView mav = controller.showOwner(-1);

        assertEquals("owners/ownerDetails", mav.getViewName());
        assertNull(mav.getModel().get("owner"));
    }

	@Test
    void testShowOwner_IdNotExist() {
        when(owners.findById(100)).thenReturn(null);

        ModelAndView mav = controller.showOwner(100);

        assertEquals("owners/ownerDetails", mav.getViewName());
        assertNull(mav.getModel().get("owner"));
    }

}
