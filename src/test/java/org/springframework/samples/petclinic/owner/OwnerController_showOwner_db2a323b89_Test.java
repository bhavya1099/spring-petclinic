// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test to check if the correct owner details are fetched and added to the model when a valid ownerId is provided.
   - Given a valid ownerId.
   - When the showOwner function is called with the given ownerId.
   - Then the owner details fetched from the owners.findById method should match the expected owner details.
   - And the owner details should be added to the model.

2. Scenario: Test to check if a ModelAndView object with the correct view name is returned when a valid ownerId is provided.
   - Given a valid ownerId.
   - When the showOwner function is called with the given ownerId.
   - Then the returned ModelAndView object should have the view name as "owners/ownerDetails".

3. Scenario: Test to check if an exception is thrown when an invalid ownerId is provided.
   - Given an invalid ownerId.
   - When the showOwner function is called with the given ownerId.
   - Then an exception should be thrown.

4. Scenario: Test to check if the correct owner details are added to the model when the ownerId provided corresponds to an existing owner.
   - Given an ownerId corresponding to an existing owner.
   - When the showOwner function is called with the given ownerId.
   - Then the owner details fetched from the owners.findById method should correspond to the existing owner.
   - And these details should be added to the model.

5. Scenario: Test to check if no owner details are added to the model when the ownerId provided does not correspond to any existing owner.
   - Given an ownerId not corresponding to any existing owner.
   - When the showOwner function is called with the given ownerId.
   - Then no owner details should be added to the model.

6. Scenario: Test to check if the showOwner function behaves as expected when a negative ownerId is provided.
   - Given a negative ownerId.
   - When the showOwner function is called with the given ownerId.
   - Then an exception should be thrown.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

public class OwnerController_showOwner_db2a323b89_Test {

	@Mock
	private OwnerRepository owners;

	private OwnerController ownerController;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
		ownerController = new OwnerController(owners);
	}

	@Test
	public void testShowOwner_ValidOwnerId_OwnerDetailsAddedToModel() {
		Owner expectedOwner = new Owner();
		when(owners.findById(1)).thenReturn(expectedOwner);

		ModelAndView mav = ownerController.showOwner(1);

		Owner actualOwner = (Owner) mav.getModel().get("owner");
		assertEquals(expectedOwner, actualOwner);
	}

	@Test
	public void testShowOwner_ValidOwnerId_ReturnsCorrectViewName() {
		Owner owner = new Owner();
		when(owners.findById(1)).thenReturn(owner);

		ModelAndView mav = ownerController.showOwner(1);

		assertEquals("owners/ownerDetails", mav.getViewName());
	}

	@Test
    public void testShowOwner_InvalidOwnerId_ThrowsException() {
        when(owners.findById(-1)).thenThrow(new IllegalArgumentException());

        assertThrows(IllegalArgumentException.class, () -> {
            ownerController.showOwner(-1);
        });
    }

	@Test
	public void testShowOwner_OwnerIdExists_OwnerDetailsAddedToModel() {
		Owner expectedOwner = new Owner();
		when(owners.findById(1)).thenReturn(expectedOwner);

		ModelAndView mav = ownerController.showOwner(1);

		Owner actualOwner = (Owner) mav.getModel().get("owner");
		assertEquals(expectedOwner, actualOwner);
	}

	@Test
    public void testShowOwner_OwnerIdNotExists_NoOwnerDetailsAddedToModel() {
        when(owners.findById(1)).thenReturn(null);

        ModelAndView mav = ownerController.showOwner(1);

        Owner actualOwner = (Owner) mav.getModel().get("owner");
        assertEquals(null, actualOwner);
    }

	@Test
    public void testShowOwner_NegativeOwnerId_ThrowsException() {
        when(owners.findById(-1)).thenThrow(new IllegalArgumentException());

        assertThrows(IllegalArgumentException.class, () -> {
            ownerController.showOwner(-1);
        });
    }

}
