// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test if the function returns the correct view when the form has errors.
   - Input: Pass an invalid `Owner` object and a `BindingResult` object that has errors.
   - Expected Output: The function should return `VIEWS_OWNER_CREATE_OR_UPDATE_FORM`.

2. Scenario: Test if the function correctly saves a valid owner.
   - Input: Pass a valid `Owner` object and a `BindingResult` object that has no errors.
   - Expected Output: The `save` method of `owners` should be called with the given `Owner` object.

3. Scenario: Test if the function redirects to the correct URL after saving a valid owner.
   - Input: Pass a valid `Owner` object and a `BindingResult` object that has no errors.
   - Expected Output: The function should return a string that starts with "redirect:/owners/" and ends with the id of the saved owner.

4. Scenario: Test if the function correctly handles null values.
   - Input: Pass a null value for the `Owner` object or `BindingResult` object.
   - Expected Output: The function should handle null values gracefully and not throw a NullPointerException.

5. Scenario: Test if the function correctly handles an `Owner` object with no id.
   - Input: Pass a valid `Owner` object with no id and a `BindingResult` object that has no errors.
   - Expected Output: The function should handle this case correctly, possibly by assigning an id to the `Owner` object before saving it.

6. Scenario: Test if the function correctly handles a `BindingResult` object with no errors but an invalid `Owner` object.
   - Input: Pass an invalid `Owner` object and a `BindingResult` object that has no errors.
   - Expected Output: The function should handle this case correctly, possibly by checking the validity of the `Owner` object before trying to save it.
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.validation.BindingResult;
import org.springframework.validation.MapBindingResult;
import org.springframework.validation.ObjectError;

import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class OwnerController_processCreationForm_198f8f2cdf_Test {

	private OwnerRepository owners;

	private OwnerController ownerController;

	@BeforeEach
	public void setup() {
		owners = mock(OwnerRepository.class);
		ownerController = new OwnerController(owners);
	}

	@Test
	public void testProcessCreationForm_HasErrors() {
		BindingResult result = new MapBindingResult(new HashMap<>(), "owner");
		result.addError(new ObjectError("error", "error"));

		String view = ownerController.processCreationForm(new Owner(), result);
		assertEquals("owners/createOrUpdateOwnerForm", view);
	}

	@Test
	public void testProcessCreationForm_NoErrors() {
		BindingResult result = new MapBindingResult(new HashMap<>(), "owner");
		Owner owner = new Owner();
		owner.setId(1);

		when(owners.save(any(Owner.class))).thenReturn(owner);

		String view = ownerController.processCreationForm(owner, result);

		verify(owners, times(1)).save(any(Owner.class));
		assertEquals("redirect:/owners/1", view);
	}

	@Test
	public void testProcessCreationForm_NullValues() {
		String view = ownerController.processCreationForm(null, null);
		assertEquals("owners/createOrUpdateOwnerForm", view);
	}

	@Test
	public void testProcessCreationForm_NoId() {
		BindingResult result = new MapBindingResult(new HashMap<>(), "owner");
		Owner owner = new Owner();

		String view = ownerController.processCreationForm(owner, result);
		assertEquals("owners/createOrUpdateOwnerForm", view);
	}

	@Test
	public void testProcessCreationForm_InvalidOwner() {
		BindingResult result = new MapBindingResult(new HashMap<>(), "owner");
		Owner owner = new Owner();
		owner.setId(-1);

		String view = ownerController.processCreationForm(owner, result);
		assertEquals("owners/createOrUpdateOwnerForm", view);
	}

}
