// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Owner Object
In this scenario, we would pass a valid Owner object to the `processCreationForm` method. The expectation is that the owner object will be saved and the method will return a redirection URL to the owner's page.

Test Scenario 2: Invalid Owner Object
In this scenario, we would pass an invalid Owner object (one that doesn't meet the validation criteria). The expectation in this case is that the `processCreationForm` method will return the `VIEWS_OWNER_CREATE_OR_UPDATE_FORM`.

Test Scenario 3: Null Owner Object
Pass a null Owner object to the `processCreationForm` method. The expectation is that it will return `VIEWS_OWNER_CREATE_OR_UPDATE_FORM` since the validation would fail.

Test Scenario 4: Owner with Existing ID
In this scenario, we would pass an Owner object with an ID that already exists in the database. The expectation is that the method will handle this case appropriately, either by updating the existing record or by returning an error.

Test Scenario 5: Owner with Non-Existing ID
Pass an Owner object with an ID that does not exist in the database. The expectation is that the method will create a new record in the database with the specified ID.

Test Scenario 6: Owner with Special Characters in Fields
Pass an Owner object with special characters in its fields. The expectation is that the method will either handle these characters appropriately or return a validation error.

Test Scenario 7: Owner with Long Fields
Pass an Owner object with fields that exceed their maximum allowed length. The expectation is that the method will return a validation error.

Test Scenario 8: Owner with Empty Fields
Pass an Owner object with empty fields. The expectation is that the method will return a validation error because the fields are required.
*/

// ********RoostGPT********
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.samples.petclinic.owner.Owner;
import org.springframework.samples.petclinic.owner.OwnerController;
import org.springframework.samples.petclinic.owner.OwnerRepository;
import org.springframework.validation.BindingResult;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class OwnerController_processCreationForm_198f8f2cdf_Test {

	@Mock
	private OwnerRepository owners;

	@Mock
	private BindingResult result;

	@InjectMocks
	private OwnerController ownerController;

	private Owner owner;

	@BeforeEach
	void setup() {
		owner = new Owner();
		owner.setId(1);
	}

	@Test
	void processCreationForm_WhenOwnerIsValid() {
		given(result.hasErrors()).willReturn(false);

		String view = ownerController.processCreationForm(owner, result);

		verify(owners).save(any(Owner.class));
		assertThat(view).isEqualTo("redirect:/owners/" + owner.getId());
	}

	@Test
	void processCreationForm_WhenOwnerIsNotValid() {
		given(result.hasErrors()).willReturn(true);

		String view = ownerController.processCreationForm(owner, result);

		assertThat(view).isEqualTo("owners/createOrUpdateOwnerForm");
	}

}
